#!/bin/bash -u
# Test the docker-support script.

# Test framework

echo "-------------- $0"
. ./wvtest.sh

. ./lib-ci

# get_CI_env tests
CI_SYSTEM=$(CI_Env_Get)

ORIG_PATH=$PATH

TMPDIR=$(mktemp -d -p . tmpdockersupport-dirXXXXXXXX)
TMPPATH=$(mktemp -d -p . tmpdockersupport-pathXXXXXXXX)

echo WD=$TMPDIR
echo TMPPATH=$TMPPATH

#--------------------- Setup Fake environment -------------
cd $TMPDIR
export PATH=../$TMPPATH:$ORIG_PATH

#
# get a few things
#
cp ../docker-support.bsh .
cp ../lib-ci .
cp ../setup-version.bsh .
touch ci-publish-site.bsh 
chmod +x ci-publish-site.bsh

#----------------------------------------------------
# Setup - create a fake docker binary to check the command invocation
#----------------------------------------------------

# Setup a fake docker path
touch ../$TMPPATH/docker
chmod +x ../$TMPPATH/docker

#
#
cat << EOF > ../$TMPPATH/docker
#!/bin/bash
# This is a fake docker binary for testing purposes.
echo "fake-docker: \$@"
MODE=\$1
if [[ "\$MODE" == "login" ]]; then 
  echo "fake login >> \$HOME/.docker/config.json"
  [ -d \$HOME/.docker ] || mkdir \$HOME/.docker
  echo \$REGISTRY_HOST > \$HOME/.docker/config.json
fi
echo \$@ > ../$TMPDIR/TEST_docker-\$MODE
EOF

#
#
cat << EOF > ci-publish-site.bsh
#!/bin/bash
echo "fake-site-publish: \$@"
echo \$@ > ../$TMPDIR/TEST_ci-publish-site
EOF

#--------------------- Perform Tests -------------
# Check the script fails properly
#----------------------------------------------------

WVFAIL ./docker-support.bsh
WVFAIL ./docker-support.bsh unsupported

#----------------------------------------------------
# setup - test artefact version file
#----------------------------------------------------

echo "1.2.3" > VERSION
versionOrig=$( cat VERSION )

#----------------------------------------------------
# Invalid VAR check tests
#----------------------------------------------------
# these should fail because a few environment vars are not setup

WVFAIL ./docker-support.bsh setup 
WVFAIL ./docker-support.bsh publish

# now let's get specific
# ---- setup tests
WVFAIL ./docker-support.bsh setup 
export REGISTRY_HOST=someserver.foobar
WVFAIL ./docker-support.bsh setup 
export DOCKER_IMAGE=build/my-special-docker
WVPASS ./docker-support.bsh setup 


# user/pass for a login
WVFAIL ./docker-support.bsh setup -l
export REGISTRY_USERNAME=user
WVFAIL ./docker-support.bsh setup -l
export REGISTRY_PASSWORD=user
WVPASS ./docker-support.bsh setup -l

# ---- publish tests
#
# Should fail a login
# no file created

#
# given that setup has now passed. Let's simulate the real
CI_Env_Adapt $(CI_Env_Get)

export RELEASE_BRANCHES=${CI_BRANCH}
export ${CI_SYSTEM}_PULL_REQUEST=false 
. ./ci-env-vars.sh

#
rm $HOME/.docker/config.json
unset REGISTRY_USERNAME
unset REGISTRY_PASSWORD
WVFAIL ./docker-support.bsh publish
WVPASS [ ! -f $HOME/.docker/config.json ]

#
# Should succeed a login
#
export REGISTRY_USERNAME=user
export REGISTRY_PASSWORD=password
WVPASS ./docker-support.bsh publish 
WVPASS [ -f $HOME/.docker/config.json ]

WVFAIL ./docker-support.bsh publish -s
export GIT_EMAIL=some_email@somewhere.com.foo
export GIT_USERNAME=mygituser
WVPASS ./docker-support.bsh publish -s

# ^^ all env vars are setup now, so it will work in the next run

#----------------------------------------------------
# test - perform the setup but no login should have occurred
#----------------------------------------------------

rm ../$TMPDIR/TEST_docker-login
rm $HOME/.docker/config.json
WVPASS ./docker-support.bsh setup
# make sure that login was not attempted
WVPASS [ ! -f ./$TMPDIR/TEST_docker-login ]
WVPASS [ ! -f $HOME/.docker/config.json ]

#----------------------------------------------------
# test - Was docker login called ? 
#----------------------------------------------------
WVPASS ./docker-support.bsh setup -l
dockerArgs=( $(cat ../$TMPDIR/TEST_docker-login) )
expected=(\
    "login" \
    "-u" \
    "${REGISTRY_USERNAME}" \
    "-p" \
    "${REGISTRY_PASSWORD}" \
    "${REGISTRY_HOST}" \
)
WVPASSEQ "$(echo ${dockerArgs[@]})" "$(echo ${expected[@]})"
WVPASS [ -f $HOME/.docker/config.json ]

#----------------------------------------------------
# test - calling docker-support.sh calls creates  VERSION file .. so that should have happened
#        Check command modifies version
#----------------------------------------------------

versionNew=$( cat VERSION )
WVPASSNE "$versionNew" "$versionOrig"

#----------------------------------------------------
# test - the setup creates an environments file for .drone.yml .travis.yml import (. ./ci-env-vars.sh )
#        let's check it
#----------------------------------------------------

WVPASS [ -f ci-env-vars.sh ]
envVars=( $(cat ci-env-vars.sh) )
expected=(\
    "#!/bin/bash" \
    "export REGISTRY_HOST=${REGISTRY_HOST}" \
    "export VERSION=${versionNew}" \
    "export DOCKER_IMAGE=${DOCKER_IMAGE}" \
    "export DOCKER_TAG_NAME=${REGISTRY_HOST}/${DOCKER_IMAGE}:${versionNew}" \
)
WVPASSEQ "$(echo ${envVars[@]})" "$(echo ${expected[@]})"

#----------------------------------------------------
# test - docker-support.bsh publish will call 'docker push ${DOCKER_TAG_NAME}' - but only on a release branch
#        so we will test that - we have the fake docker shell script going
#----------------------------------------------------

# for the test
. ./ci-env-vars.sh

WVPASS ./docker-support.bsh publish -s
pushArgs=( $(cat ../$TMPDIR/TEST_docker-push) )
expected=(\
    "push" \
    "${REGISTRY_HOST}/${DOCKER_IMAGE}:${versionNew}" \
)
WVPASSEQ "$(echo ${pushArgs[@]})" "$(echo ${expected[@]})"

#----------------------------------------------------
# test - docker-support.bsh will call ci-publish-site,bsh .. so lets make sure that was called
#----------------------------------------------------

sitePublish=(  $( cat ../$TMPDIR/TEST_ci-publish-site ) )
expected=( "_site" )
WVPASSEQ "$(echo ${sitePublish[@]})" "$(echo ${expected[@]})"

#----------------------------------------------------
# should not publish if not passed a -s
#----------------------------------------------------
rm ../$TMPDIR/TEST_ci-publish-site
WVPASS ./docker-support.bsh publish 
WVPASS [ ! -f ../$TMPDIR/TEST_ci-publish-site ]

#----------------------------------------------------
# test - check rmi was called
#----------------------------------------------------

dockerRmiArgs=( $(cat ../$TMPDIR/TEST_docker-rmi) )
expected=(\
    "rmi" \ 
    "${DOCKER_TAG_NAME}" \
)
WVPASSEQ "$(echo ${dockerRmiArgs[@]})" "$(echo ${expected[@]})"

#----------------------------------------------------
# Cleanup
#----------------------------------------------------
cd ..
rm -rf $TMPPATH $TMPDIR 

echo "-------------- END $0"
