#!/bin/bash
# Test the sbt-ci-build-doc. To do this, we import a very simple sbt project
# (included in this repository) and build documentation against it.

# Test framework
. ./wvtest.sh

# Base dir for sbt
TMPBASE=$(mktemp -d -p . tmpsbt-ci-build-doc-tmp_sbt_baseXXXXXXXX)

# This is our fake remote repo to send documentation to
TMPREMOTE=$(mktemp -d -p . tmpsbt-ci-build-doc-tmp_git_remote_XXXXXXXX)
git init --bare $TMPREMOTE || exit 1

# Test fixtures mean we need to know where we're running
SCRIPT_DIR="${BASH_SOURCE%/*}"
if [[ ! -d "$SCRIPT_DIR" ]]; then SCRIPT_DIR="$PWD"; fi

# Testing the test fixtures
ORIG_PWD=$(pwd)
cd $SCRIPT_DIR/test-sbt-ci-build-doc

ORIG_CI_BRANCH=$CI_BRANCH

# We need to do some setup - namely, turning the test fixture root into a
# git repository. sbt-ci-build-doc will then operate on this repo in a
# subdirectory.
git init . || exit 1
git config user.email "zbi+test@cba.com.au"
git config user.name "WVTEST"
git add -A || exit 1
git commit -m "Initial commit" || exit 1
git symbolic-ref HEAD refs/heads/master || exit 1

# Test that we fail when there is no git remote.
export FORCE_PUBLISH=yes
WVFAIL ../../sbt-ci-build-doc.bsh "http://testroot" "http://testsourceroot"

# Make a git remote to allow the script to find one
git remote add origin $(readlink -f $TMPREMOTE) || exit 1

# This should now run correctly.
WVPASS ../../sbt-ci-build-doc.bsh "http://testroot" "http://testsourceroot"

# Remove temporary directories
rm -rf .gitkeep .git $TMPBASE $TMPREMOTE

cd $ORIG_PWD
